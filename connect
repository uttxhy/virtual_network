#!/bin/bash


function title {
	echo -n $1"@"$2"> "

}

function connectLogin {

# $1: userName $2:machine to connect $3: password
	flag1=false
	flag2=false

	while read userName userLevel password finger
	do
		if [[ $userName == $1 ]] && [[ $password == $3 ]]
		then
			flag1=true
			echo "Password right, search $2"

			while read machine levelMachine machineRelie
			do
				if [[ $machine == $2 ]] && [[ $userLevel -le $levelMachine ]];
				then
					flag2=true
					break
				fi
			done < ./tables/Machine
			if [[ $flag2 == true ]]
			then
				break
			fi
		fi
	done < ./tables/User

	if [ $flag1 == true ] && [ $flag2 == true ]
	then
		ttyCur=$(echo $(tty) | sed "s/\///g")
		echo $ttyCur
		sed -i "/$1.*$ttyCur/d" ./tables/User_Machine
		#delete old user and machine in table User_Machine
		# while read userName machineName dateStr timeStr ttyLogin
		# do
		# 	ttyCur=$(tty)
		# 	if [ $1 == $userName ] && [ $2 != $machineName ]
		# 	then
		# 		sed -i "/$userName/d" ./tables/User_Machine
		# 	fi
 	# 	done < ./tables/User_Machine	
		
		date=$(date "+%Y-%m-%d %H:%M:%S")
		echo $1 $2 $date "null" $ttyCur >> ./tables/User_Machine
		echo 'Connexion successful'
		echo "We already connect $1 to $2"
		sleep 1
		clear
		connect_func $1 $2

	
	elif [ $flag1 == false ]
	then

		#statements
		echo "User or password not correct!"
		exit

	elif [ $flag2 == false ]
	then

		#statements
		echo "We can't find $2 or $1 doesn't have the permission to connect $2"
		exit

	fi
}



function connect_func {
	echo 'Mode users'
	title $1 $2

	tmp=null
	ttyCur=$(echo $(tty) | sed "s/\///g")
	#tmp = msg
	while read userName machineName dateStr timeStr msg ttyLogin
	do
		if [[ $ttyCur == $ttyLogin ]]
		then
			tmp=$msg
		fi
	done < ./tables/User_Machine

	flag3=false
	flag4=false

	while true
	do
		while read userName machineName dateStr timeStr msg ttyLogin
		do
			if [[ $ttyCur == $ttyLogin ]] && [[ $tmp != $msg ]]
			then
				echo "$msg"
				tmp=$msg
				title $1 $2
			fi
		done < ./tables/User_Machine

		if read -t 0.1 input
		then

			if [[ "$input" != "exit" ]]; then

			   case "$input" in

				"who")

				  ./commande_who $2;;

				"rusers")

				  ./commande_rusers;;

				"rhost")

				  ./commande_rhost $2;;

				"connect")
					echo "Which machine do you want to connect?"
					read newMachine

					userName=$1
					oldMachine=$2
					flag3=false
					flag4=false
					flag5=false

					#Justify if the new machine equals old machine
					if [ $oldMachine == $newMachine ]
					then
						echo "You've already connect to this machine!"
						title $1 $2
						continue
						
					fi

					#Justify if the new machine exists
					while read machineName machineLevel
					do
						if [ $newMachine == $machineName ]
						then
							flag3=true
						fi 
					done < ./tables/Machine

					if [ $flag3 == false ]
					then
						echo "$newMachine doesn't exist in this network!"
						title $1 $2
						continue
					
					fi

					while read machineName machineRelie
					do
						if [ $oldMachine == $machineName ] && [ $newMachine == $machineRelie ]
						then
							flag4=true
							
						fi
					done < ./tables/Machine_Relie

					if [ $flag4 == false ]
					then
						echo "$newMachine isn't joined to $oldMachine, so you cannot connect to $newMachine"
						title $1 $2
						continue
					fi

					#connect to the new machine
					echo "Password of $userName:"
					read -s password
					echo $password
					echo 'Wait...'

					while read userName userLevel passwd finger
					do
						if [[ $userName == $1 ]] && [[ $password == $passwd ]]
						then
							flag5=true
							echo "Password right, search $2"

						fi
					done < ./tables/User
					if [ $flag5 == false ] 
					then
						echo "User or password not correct!"
						title $1 $2
						continue
					fi

					connectLogin $1 $newMachine $password
					break
								    #./commande_connect $1 $2
				 
				;;
				  

				"su")
					echo "Which user do you want to change to?"
					read newUser

				  ./commande_su $1 $2

				;;

				"passwd")

				  passwd $1

				;;

				"finger")

				  finger $1

				;;

				"write "*"@"*" "*)

				  write $input

				;;

				"clear")

				  clear

				;;

				*)

				  echo ""

				  echo $input": command not found"

				  echo ""		  
				;;

			   esac

			else
				ttyCur=$(echo $(tty) | sed "s/\///g")
				sed -i "/$1.*$ttyCur/d" ./tables/User_Machine
				break

			fi
			title $1 $2

		fi
	done
		echo ""
		echo "Exit System"
		echo ""	
}


function who {

	echo 'who'
}


function rusers {

	echo 'rusers'
}

function rhost {

	echo 'rhost'
}

function connect {
	echo "Which machine do you want to connect?"
	read machine
	./commande_connect $machine
}

function su {
	if [[ $# -eq 2 ]]
	then

			#statements
			echo "Mode Connect: connet to $2"
			echo "Password of $3:"
			read -s password
			echo 'Wait...'
			connectLogin $2 $1 $password
			break
	fi
}

function passwd {
	echo "Please enter the original password: "
	read oldPasswd
	if [[ $oldPasswd == $(grep "$1" ./tables/User | cut -d' ' -f3) ]]; then
	 	#statements
	 	echo "Please enter the new password: "
	 	read newPasswd
	 	sed -i "s/\($1 [^ ]* \)\([^ ]*\)\( [^ ]*\)/\1$newPasswd\3/g" ./tables/User
	 	echo "The password is successfully changed!"
	 else
	 	echo "The password is incorrect!"
	 fi 
}

function finger {
	grep "$1" ./tables/User | cut -d' ' -f4 | sed "s/_/ /g"
}

function write {
	user=$(echo $2 | cut -d '@' -f1)
	machine=$(echo $2 | cut -d '@' -f2)
	newMsg=$3
	sed -i "s/\($user $machine [^ ]* [^ ]* \)\([^ ]*\)\( [^ ]*\)/\1$newMsg\3/g" ./tables/User_Machine
}

# Main

connectLogin $1 $2 $3